#!/usr/bin/env bash

# Build and test all example solutions.
#
# In an ideal world we would just invoke `spago test` in each exercise
# directory. Each exercise directory is its own project and will pull in
# the needed dependencies and build them which turns out to be a lengthy
# and wasteful operation. We optimize this process by setting up shared
# ".spago" and "output" directories. This does introduce some additional
# constraints:
#
# - We assume the exercise projects are using the same package-set. This
#   is validated with `scripts/ci-check`.
#
# - The module names must be unique across all exercises. This is already
#   enforced because exercises have a unique slug. The test module names
#   are rewritten to follow the exercise name.

# ToDo:
# - Add support for concept exercises

set -e
set -u
set -o pipefail

build_dir="./_build"

if [ -z "${CI+x}" ]; then
    # When running locally we want start with a clean slate.
    if [ -d ${build_dir} ]; then
        echo "Found existing ${build_dir}; removing..."
        rm -rf ${build_dir}
    fi
fi

mkdir -p "${build_dir}"/{_output,_spago}

cp -R ./exercises/practice "${build_dir}"

for exercise_dir in "${build_dir}/practice/"*; do
    exercise_slug=$(basename "${exercise_dir}")

    echo ">> Working on practice/${exercise_slug}"

    pushd "${exercise_dir}" > /dev/null

    cp ./examples/src/*.purs ./src

    # Use a shared output and .spago directory to avoid rebuilding shared
    # dependencies. These directories are ideal candidates for caching on
    # GitHub CI...
    ln -s ../../_output ./output
    ln -s ../../_spago ./.spago

    # XXX(emiel) Go for real pascal case; not uppercase
    exercise_pascal=$(echo "${exercise_slug}" | tr '[:lower:]' '[:upper:]' | sed -e "s/-//g")

    # Substitute generic module name to avoid module name clash in test
    # modules. Ideally we do this in place but haven't found a portable
    # way to accomplish this.
    cp ./test/Main.purs ./test/Main.purs.orig
    sed "s/module Test.Main/module Test.${exercise_pascal}/" < ./test/Main.purs.orig > ./test/Main.purs

    # Execute the test (and build)
    spago test -m "Test.${exercise_pascal}"

    popd > /dev/null
done
